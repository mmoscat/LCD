#include <avr/pgmspace.h>
#include "Font.h"

#ifndef NO_DEFAULT_FONT

// 8x6 default font copied from:
// http://www.piclist.com/techref/datafile/charset/8x6.htm
const char DEFAULT_FONT[][6] PROGMEM = {
     {0x00, 0x64, 0x18, 0x04, 0x64, 0x18},
     {0x00, 0x3c, 0x40, 0x40, 0x20, 0x7c},
     {0x00, 0x0c, 0x30, 0x40, 0x30, 0x0c},
     {0x00, 0x3c, 0x40, 0x30, 0x40, 0x3c},
     {0x00, 0x00, 0x3e, 0x1c, 0x08, 0x00},
     {0x00, 0x04, 0x1e, 0x1f, 0x1e, 0x04},
     {0x00, 0x10, 0x3c, 0x7c, 0x3c, 0x10},
     {0x00, 0x20, 0x40, 0x3e, 0x01, 0x02},
     {0x00, 0x22, 0x14, 0x08, 0x14, 0x22},
     {0x00, 0x00, 0x38, 0x28, 0x38, 0x00},
     {0x00, 0x00, 0x10, 0x38, 0x10, 0x00},
     {0x00, 0x00, 0x00, 0x10, 0x00, 0x00},
     {0x00, 0x08, 0x78, 0x08, 0x00, 0x00},
     {0x00, 0x00, 0x15, 0x15, 0x0a, 0x00},
     {0x00, 0x7f, 0x7f, 0x09, 0x09, 0x01},
     {0x00, 0x10, 0x20, 0x7f, 0x01, 0x01},
     {0x00, 0x04, 0x04, 0x00, 0x01, 0x1f},
     {0x00, 0x00, 0x19, 0x15, 0x12, 0x00},
     {0x00, 0x40, 0x60, 0x50, 0x48, 0x44},
     {0x00, 0x06, 0x09, 0x09, 0x06, 0x00},
     {0x00, 0x0f, 0x02, 0x01, 0x01, 0x00},
     {0x00, 0x00, 0x01, 0x1f, 0x01, 0x00},
     {0x00, 0x44, 0x44, 0x4a, 0x4a, 0x51},
     {0x00, 0x14, 0x74, 0x1c, 0x17, 0x14},
     {0x00, 0x51, 0x4a, 0x4a, 0x44, 0x44},
     {0x00, 0x00, 0x00, 0x04, 0x04, 0x04},
     {0x00, 0x00, 0x7c, 0x54, 0x54, 0x44},
     {0x00, 0x08, 0x08, 0x2a, 0x1c, 0x08},
     {0x00, 0x7c, 0x00, 0x7c, 0x44, 0x7c},
     {0x00, 0x04, 0x02, 0x7f, 0x02, 0x04},
     {0x00, 0x10, 0x20, 0x7f, 0x20, 0x10},
     {0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
     {0x00, 0x00, 0x00, 0x6f, 0x00, 0x00},
     {0x00, 0x00, 0x07, 0x00, 0x07, 0x00},
     {0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14},
     {0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12},
     {0x00, 0x23, 0x13, 0x08, 0x64, 0x62},
     {0x00, 0x36, 0x49, 0x56, 0x20, 0x50},
     {0x00, 0x00, 0x00, 0x07, 0x00, 0x00},
     {0x00, 0x00, 0x1c, 0x22, 0x41, 0x00},
     {0x00, 0x00, 0x41, 0x22, 0x1c, 0x00},
     {0x00, 0x14, 0x08, 0x3e, 0x08, 0x14},
     {0x00, 0x08, 0x08, 0x3e, 0x08, 0x08},
     {0x00, 0x00, 0x50, 0x30, 0x00, 0x00},
     {0x00, 0x08, 0x08, 0x08, 0x08, 0x08},
     {0x00, 0x00, 0x60, 0x60, 0x00, 0x00},
     {0x00, 0x20, 0x10, 0x08, 0x04, 0x02},
     {0x00, 0x3e, 0x51, 0x49, 0x45, 0x3e},
     {0x00, 0x00, 0x42, 0x7f, 0x40, 0x00},
     {0x00, 0x42, 0x61, 0x51, 0x49, 0x46},
     {0x00, 0x21, 0x41, 0x45, 0x4b, 0x31},
     {0x00, 0x18, 0x14, 0x12, 0x7f, 0x10},
     {0x00, 0x27, 0x45, 0x45, 0x45, 0x39},
     {0x00, 0x3c, 0x4a, 0x49, 0x49, 0x30},
     {0x00, 0x01, 0x71, 0x09, 0x05, 0x03},
     {0x00, 0x36, 0x49, 0x49, 0x49, 0x36},
     {0x00, 0x06, 0x49, 0x49, 0x29, 0x1e},
     {0x00, 0x00, 0x36, 0x36, 0x00, 0x00},
     {0x00, 0x00, 0x56, 0x36, 0x00, 0x00},
     {0x00, 0x08, 0x14, 0x22, 0x41, 0x00},
     {0x00, 0x14, 0x14, 0x14, 0x14, 0x14},
     {0x00, 0x00, 0x41, 0x22, 0x14, 0x08},
     {0x00, 0x02, 0x01, 0x51, 0x09, 0x06},
     {0x00, 0x3e, 0x41, 0x5d, 0x49, 0x4e},
     {0x00, 0x7e, 0x09, 0x09, 0x09, 0x7e},
     {0x00, 0x7f, 0x49, 0x49, 0x49, 0x36},
     {0x00, 0x3e, 0x41, 0x41, 0x41, 0x22},
     {0x00, 0x7f, 0x41, 0x41, 0x41, 0x3e},
     {0x00, 0x7f, 0x49, 0x49, 0x49, 0x41},
     {0x00, 0x7f, 0x09, 0x09, 0x09, 0x01},
     {0x00, 0x3e, 0x41, 0x49, 0x49, 0x7a},
     {0x00, 0x7f, 0x08, 0x08, 0x08, 0x7f},
     {0x00, 0x00, 0x41, 0x7f, 0x41, 0x00},
     {0x00, 0x20, 0x40, 0x41, 0x3f, 0x01},
     {0x00, 0x7f, 0x08, 0x14, 0x22, 0x41},
     {0x00, 0x7f, 0x40, 0x40, 0x40, 0x40},
     {0x00, 0x7f, 0x02, 0x0c, 0x02, 0x7f},
     {0x00, 0x7f, 0x04, 0x08, 0x10, 0x7f},
     {0x00, 0x3e, 0x41, 0x41, 0x41, 0x3e},
     {0x00, 0x7f, 0x09, 0x09, 0x09, 0x06},
     {0x00, 0x3e, 0x41, 0x51, 0x21, 0x5e},
     {0x00, 0x7f, 0x09, 0x19, 0x29, 0x46},
     {0x00, 0x46, 0x49, 0x49, 0x49, 0x31},
     {0x00, 0x01, 0x01, 0x7f, 0x01, 0x01},
     {0x00, 0x3f, 0x40, 0x40, 0x40, 0x3f},
     {0x00, 0x0f, 0x30, 0x40, 0x30, 0x0f},
     {0x00, 0x3f, 0x40, 0x30, 0x40, 0x3f},
     {0x00, 0x63, 0x14, 0x08, 0x14, 0x63},
     {0x00, 0x07, 0x08, 0x70, 0x08, 0x07},
     {0x00, 0x61, 0x51, 0x49, 0x45, 0x43},
     {0x00, 0x00, 0x00, 0x7f, 0x41, 0x00},
     {0x00, 0x02, 0x04, 0x08, 0x10, 0x20},
     {0x00, 0x00, 0x41, 0x7f, 0x00, 0x00},
     {0x00, 0x04, 0x02, 0x01, 0x02, 0x04},
     {0x00, 0x40, 0x40, 0x40, 0x40, 0x40},
     {0x00, 0x00, 0x00, 0x03, 0x04, 0x00},
     {0x00, 0x20, 0x54, 0x54, 0x54, 0x78},
     {0x00, 0x7f, 0x48, 0x44, 0x44, 0x38},
     {0x00, 0x38, 0x44, 0x44, 0x44, 0x20},
     {0x00, 0x38, 0x44, 0x44, 0x48, 0x7f},
     {0x00, 0x38, 0x54, 0x54, 0x54, 0x18},
     {0x00, 0x08, 0x7e, 0x09, 0x01, 0x02},
     {0x00, 0x0c, 0x52, 0x52, 0x52, 0x3e},
     {0x00, 0x7f, 0x08, 0x04, 0x04, 0x78},
     {0x00, 0x00, 0x44, 0x7d, 0x40, 0x00},
     {0x00, 0x20, 0x40, 0x44, 0x3d, 0x00},
     {0x00, 0x00, 0x7f, 0x10, 0x28, 0x44},
     {0x00, 0x00, 0x41, 0x7f, 0x40, 0x00},
     {0x00, 0x7c, 0x04, 0x18, 0x04, 0x78},
     {0x00, 0x7c, 0x08, 0x04, 0x04, 0x78},
     {0x00, 0x38, 0x44, 0x44, 0x44, 0x38},
     {0x00, 0x7c, 0x14, 0x14, 0x14, 0x08},
     {0x00, 0x08, 0x14, 0x14, 0x18, 0x7c},
     {0x00, 0x7c, 0x08, 0x04, 0x04, 0x08},
     {0x00, 0x48, 0x54, 0x54, 0x54, 0x20},
     {0x00, 0x04, 0x3f, 0x44, 0x40, 0x20},
     {0x00, 0x3c, 0x40, 0x40, 0x20, 0x7c},
     {0x00, 0x1c, 0x20, 0x40, 0x20, 0x1c},
     {0x00, 0x3c, 0x40, 0x30, 0x40, 0x3c},
     {0x00, 0x44, 0x28, 0x10, 0x28, 0x44},
     {0x00, 0x0c, 0x50, 0x50, 0x50, 0x3c},
     {0x00, 0x44, 0x64, 0x54, 0x4c, 0x44},
     {0x00, 0x00, 0x08, 0x36, 0x41, 0x41},
     {0x00, 0x00, 0x00, 0x7f, 0x00, 0x00},
     {0x00, 0x41, 0x41, 0x36, 0x08, 0x00},
     {0x00, 0x04, 0x02, 0x04, 0x08, 0x04},
     {0x00, 0x7f, 0x6b, 0x6b, 0x6b, 0x7f},
     {0x00, 0x00, 0x7c, 0x44, 0x7c, 0x00},
     {0x00, 0x00, 0x08, 0x7c, 0x00, 0x00},
     {0x00, 0x00, 0x64, 0x54, 0x48, 0x00},
     {0x00, 0x00, 0x44, 0x54, 0x28, 0x00},
     {0x00, 0x00, 0x1c, 0x10, 0x78, 0x00},
     {0x00, 0x00, 0x5c, 0x54, 0x24, 0x00},
     {0x00, 0x00, 0x78, 0x54, 0x74, 0x00},
     {0x00, 0x00, 0x64, 0x14, 0x0c, 0x00},
     {0x00, 0x00, 0x7c, 0x54, 0x7c, 0x00},
     {0x00, 0x00, 0x5c, 0x54, 0x3c, 0x00},
     {0x00, 0x78, 0x24, 0x26, 0x25, 0x78},
     {0x00, 0x78, 0x25, 0x26, 0x24, 0x78},
     {0x00, 0x70, 0x2a, 0x29, 0x2a, 0x70},
     {0x00, 0x78, 0x25, 0x24, 0x25, 0x78},
     {0x00, 0x20, 0x54, 0x56, 0x55, 0x78},
     {0x00, 0x20, 0x55, 0x56, 0x54, 0x78},
     {0x00, 0x20, 0x56, 0x55, 0x56, 0x78},
     {0x00, 0x20, 0x55, 0x54, 0x55, 0x78},
     {0x00, 0x7c, 0x54, 0x56, 0x55, 0x44},
     {0x00, 0x7c, 0x55, 0x56, 0x54, 0x44},
     {0x00, 0x7c, 0x56, 0x55, 0x56, 0x44},
     {0x00, 0x7c, 0x55, 0x54, 0x55, 0x44},
     {0x00, 0x38, 0x54, 0x56, 0x55, 0x18},
     {0x00, 0x38, 0x55, 0x56, 0x54, 0x18},
     {0x00, 0x38, 0x56, 0x55, 0x56, 0x18},
     {0x00, 0x38, 0x55, 0x54, 0x55, 0x18},
     {0x00, 0x00, 0x44, 0x7e, 0x45, 0x00},
     {0x00, 0x00, 0x45, 0x7e, 0x44, 0x00},
     {0x00, 0x00, 0x46, 0x7d, 0x46, 0x00},
     {0x00, 0x00, 0x45, 0x7c, 0x45, 0x00},
     {0x00, 0x00, 0x48, 0x7a, 0x41, 0x00},
     {0x00, 0x00, 0x49, 0x7a, 0x40, 0x00},
     {0x00, 0x00, 0x4a, 0x79, 0x42, 0x00},
     {0x00, 0x00, 0x49, 0x78, 0x41, 0x00},
     {0x00, 0x38, 0x44, 0x46, 0x45, 0x38},
     {0x00, 0x38, 0x45, 0x46, 0x44, 0x38},
     {0x00, 0x38, 0x46, 0x45, 0x46, 0x38},
     {0x00, 0x38, 0x45, 0x44, 0x45, 0x38},
     {0x00, 0x30, 0x48, 0x4a, 0x49, 0x30},
     {0x00, 0x30, 0x49, 0x4a, 0x48, 0x30},
     {0x00, 0x30, 0x4a, 0x49, 0x4a, 0x30},
     {0x00, 0x30, 0x49, 0x48, 0x49, 0x30},
     {0x00, 0x3c, 0x40, 0x42, 0x41, 0x3c},
     {0x00, 0x3c, 0x41, 0x42, 0x40, 0x3c},
     {0x00, 0x3c, 0x42, 0x41, 0x42, 0x3c},
     {0x00, 0x3c, 0x41, 0x40, 0x41, 0x3c},
     {0x00, 0x3c, 0x40, 0x42, 0x21, 0x7c},
     {0x00, 0x3c, 0x41, 0x42, 0x20, 0x7c},
     {0x00, 0x38, 0x42, 0x41, 0x22, 0x78},
     {0x00, 0x3c, 0x41, 0x40, 0x21, 0x7c},
     {0x00, 0x4e, 0x51, 0x71, 0x11, 0x0a},
     {0x00, 0x58, 0x64, 0x64, 0x24, 0x10},
     {0x00, 0x7c, 0x0a, 0x11, 0x22, 0x7d},
     {0x00, 0x78, 0x12, 0x09, 0x0a, 0x71},
     {0x00, 0x00, 0x00, 0x04, 0x02, 0x01},
     {0x00, 0x01, 0x02, 0x04, 0x00, 0x00},
     {0x00, 0x00, 0x02, 0x00, 0x02, 0x00},
     {0x00, 0x30, 0x48, 0x45, 0x40, 0x20},
     {0x00, 0x00, 0x00, 0x7b, 0x00, 0x00},
     {0x00, 0x38, 0x44, 0x44, 0x38, 0x44},
     {0x00, 0x40, 0x3e, 0x49, 0x49, 0x36},
     {0x00, 0x08, 0x04, 0x08, 0x70, 0x0c},
     {0x00, 0x60, 0x50, 0x48, 0x50, 0x60},
     {0x00, 0x20, 0x52, 0x55, 0x59, 0x30},
     {0x00, 0x38, 0x54, 0x54, 0x54, 0x00},
     {0x00, 0x3c, 0x4a, 0x49, 0x29, 0x1e},
     {0x00, 0x40, 0x22, 0x14, 0x18, 0x60},
     {0x00, 0x7c, 0x20, 0x20, 0x1c, 0x20},
     {0x00, 0x44, 0x3c, 0x04, 0x7c, 0x44},
     {0x00, 0x40, 0x3c, 0x12, 0x12, 0x0c},
     {0x00, 0x41, 0x63, 0x55, 0x49, 0x41},
     {0x00, 0x38, 0x44, 0x44, 0x3c, 0x04},
     {0x00, 0x08, 0x04, 0x3c, 0x44, 0x24},
     {0x00, 0x08, 0x14, 0x7f, 0x14, 0x08},
     {0x00, 0x4e, 0x71, 0x01, 0x71, 0x4e},
     {0x00, 0x45, 0x29, 0x11, 0x29, 0x45},
     {0x00, 0x0d, 0x51, 0x51, 0x51, 0x3d},
     {0x00, 0x00, 0x00, 0x05, 0x02, 0x05},
     {0x00, 0x40, 0x00, 0x40, 0x00, 0x40},
     {0x00, 0x00, 0x08, 0x1c, 0x3e, 0x00},
     {0x00, 0x1c, 0x1c, 0x1c, 0x00, 0x00},
     {0x00, 0x00, 0x70, 0x08, 0x07, 0x00},
     {0x00, 0x00, 0x08, 0x08, 0x08, 0x00},
     {0x00, 0x00, 0x1d, 0x15, 0x17, 0x00},
     {0x00, 0x00, 0x07, 0x05, 0x07, 0x00},
     {0x00, 0x00, 0x11, 0x15, 0x0a, 0x00},
     {0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
     {0x00, 0x04, 0x3c, 0x41, 0x20, 0x00},
     {0x00, 0x7c, 0x16, 0x15, 0x16, 0x08},
     {0x00, 0x21, 0x16, 0x08, 0x34, 0x42},
     {0x00, 0x7f, 0x09, 0x1d, 0x01, 0x03},
     {0x00, 0x38, 0x54, 0x54, 0x14, 0x08},
     {0x00, 0x00, 0x00, 0x7c, 0x40, 0x40},
     {0x00, 0x7f, 0x0e, 0x1c, 0x38, 0x7f},
     {0x00, 0x41, 0x22, 0x5d, 0x22, 0x1c},
     {0x00, 0x1c, 0x3e, 0x1c, 0x08, 0x00},
     {0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f},
     {0x00, 0x77, 0x7b, 0x01, 0x7b, 0x77},
     {0x00, 0x7f, 0x43, 0x75, 0x43, 0x7f},
     {0x00, 0x7f, 0x6f, 0x55, 0x43, 0x7f},
     {0x00, 0x40, 0x40, 0x40, 0x40, 0x40},
     {0x00, 0x44, 0x42, 0x5f, 0x42, 0x44},
     {0x00, 0x40, 0x5e, 0x45, 0x5e, 0x40},
     {0x00, 0x40, 0x48, 0x55, 0x5e, 0x40},
     {0x00, 0x00, 0x04, 0x08, 0x10, 0x20},
     {0x00, 0x03, 0x07, 0x0e, 0x1c, 0x38},
     {0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f},
     {0x00, 0x7c, 0x78, 0x70, 0x60, 0x40},
     {0x00, 0x08, 0x08, 0x1c, 0x22, 0x1c},
     {0x00, 0x00, 0x1c, 0x22, 0x1c, 0x00},
     {0x00, 0x02, 0x00, 0x08, 0x00, 0x20},
     {0x00, 0x04, 0x3e, 0x3f, 0x3e, 0x04},
     {0x00, 0x10, 0x3e, 0x7e, 0x3e, 0x10},
     {0x00, 0x55, 0x2a, 0x55, 0x2a, 0x55},
     {0x00, 0x00, 0x07, 0x04, 0x1e, 0x00},
     {0x00, 0x04, 0x1e, 0x1f, 0x1e, 0x04}
};

// This constructor initializes the font to be the
// default font, and is used only when the
// NO_DEFAULT_FONT preprocessor directive is not
// defined.
Font::Font()
{
     // Initialize members to defaults (for DEFAULT_FONT)
     m_font = (char *) DEFAULT_FONT;
     m_width = 6;
     m_chars = 243;
     m_offset = 1;
}

#endif /* NO_DEFAULT_FONT */

// This constructor initializes the font to be used with
// the parameters provided. The arguments are a pointer
// to the 2D font array, the number of characters in the
// font, the width of the font characters, and the
// offset of where the font starts.
Font::Font(const char *font, int characters, int width, int offset)
{
     // Initialize the members for custom fonts
     m_font = font;
     m_width = width;
     m_chars = characters;
     m_offset = offset;
}

// Overload the default array operator so that Font
// objects can be used as 2D arrays.
Font::FontWrapper Font::operator[](int index)
{
     // Return the font wrapper with the given index
     return FontWrapper(this, index);
}

// Returns the width of the font characters.
int Font::getWidth()
{
     return m_width;
}

// Returns the start offset of the font.
int Font::getOffset()
{
     return m_offset;
}

// Returns the width of the font characters.
int Font::getCharacterCount()
{
     return m_chars;
}

// Returns the column 'index' from the character 'which'.
char Font::getCharColumn(int which, int index)
{
     // Offset the character being accessed
     which = which - m_offset;

     // Check the bounds, if out of bounds, return 0
     if (which < 0 || index < 0 || which >= m_chars || index >= m_width) {
	  return 0;
     }

     // Return the column for the character from the progmem area
     return pgm_read_byte(m_font + (which * m_width) + index);
}

// Font wrapper to allow fonts to be used as 2D arrays.
// The arguments are the font being wrapped, and the
// first index into the 2D array (the character).
Font::FontWrapper::FontWrapper(Font *font, int index)
{
     // Set the members of the wrapper
     m_font = font;
     m_first = index;
}

// Overload the default array operator so that Font
// objects can be used as 2D arrays.
char Font::FontWrapper::operator[](int index)
{
     // Return the character column being accessed
     return getCharColumn(index);
}

// Calls the getCharColumn function of the font being
// wrapped.
char Font::FontWrapper::getCharColumn(int index)
{
     // Return the character column being accessed
     return m_font->getCharColumn(m_first, index);
}
